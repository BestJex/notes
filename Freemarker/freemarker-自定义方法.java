----------------------------
标签实现					|
----------------------------
	# 语法
		<#function name param1 param2 ... paramN>
		  ...
		  <#return returnValue>
		  ...
		</#function>
		
		* name 方法名称
		* 可以定义多个参数
		* paramN,最后一个参数, 可以可选的包含一个尾部省略(...)这就意味着宏接受可变的参数数量,局部变量 paramN 将是额外参数的序列(变成参数)
		* 参数可以有默认值,但是必须排在普通参数的后面
		* return 指令是必须的
		* 方法内的所有输出都会被忽略
	
	# Demo
		<#function foo v1 v2 v3...>
			<#local x = v1 + v2>
			<#list v3 as i>
				<#local x = i + x>
			</#list>
			<#return x>
		</#function>

		${foo(1,2,3,4,5)}		//15


----------------------------
编码实现					|
----------------------------
	# 实现接口: TemplateMethodModelEx 
		import java.util.List;

		import freemarker.core.Environment;
		import freemarker.template.TemplateMethodModelEx;
		import freemarker.template.TemplateModelException;

		public class FooFunction implements TemplateMethodModelEx{

			public FooFunction() {
				System.out.println("new");
			}
			
			//arguments 就是传递进来的参数
			@SuppressWarnings("rawtypes")
			@Override
			public Object exec(List arguments) throws TemplateModelException {
				//获取当前运行环境
				Environment environment = Environment.getCurrentEnvironment();
				System.out.println(environment);
				return "result";
			}
		}

	
	# 把该实例给模版引擎,作为一个变量存在
		* configuration.setSharedVariable("fooFunc", new FooFunction());
		* 可以设置为共享变量,以单例形式存在
	
	# 在模板引擎中使用
		${fooFunc("123456")}
	



